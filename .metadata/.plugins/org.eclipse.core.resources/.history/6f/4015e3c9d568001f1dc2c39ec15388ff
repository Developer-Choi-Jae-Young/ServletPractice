package com.kh.member.model.dao;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

import static com.kh.common.JDBCTemplate.*;
import com.kh.member.model.vo.Member;

public class MemberDao {
	private Properties prop = new Properties();
	
	public MemberDao() {
		String filepath = MemberDao.class.getResource("/db/sql/member-mapper.xml").getPath();

		try {			
			prop.loadFromXML(new FileInputStream(filepath));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public Member loginMember(Connection conn, String id, String pwd) {
		// SELECT문 (조회) -> ResultSet 객체 (한 행) --> Member객체 반환
		
		Member m = null;
		PreparedStatement pstmt = null;		//JDCB 객체 -> SQL문 실행 후 결과를 받아올 객체
		ResultSet rset = null;				//JDCB 객체 -> 조회 결과가 담길 객체
		
		// 실행할 쿼리문
		String sql = prop.getProperty("loginMember");
		
		try {			
			pstmt = conn.prepareStatement(sql);		// 미완성 형태 sql
			
			pstmt.setString(1, id);
			pstmt.setString(2, pwd);
			
			rset = pstmt.executeQuery();		// 조회결과가 있을 경우 한 행 반환/없을 경우 아무것도 반환되지 않음!
			
			while(rset.next()) {
				// 조회된 결과가 있을 경우 Member객체에 담기
				m = new Member(rset.getInt("USER_NO"), rset.getString("USER_ID")
						, rset.getString("USER_PWD"), rset.getString("USER_NAME")
						, rset.getString("PHONE"), rset.getString("EMAIL")
						, rset.getString("ADDRESS"), rset.getString("INTEREST")
						, rset.getDate("ENROLL_DATE"), rset.getDate("MODIFY_DATE")
						, rset.getString("STATUS"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);			
		}
		
		return m;
	}
	
	public int insertMember(Connection conn, Member member) {
		int result = 0;
		PreparedStatement pstmt = null;		//JDCB 객체 -> SQL문 실행 후 결과를 받아올 객체
		
		// 실행할 쿼리문
		String sql = prop.getProperty("insertMember");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, member.getUserId());
			pstmt.setString(2, member.getUserPwd());
			pstmt.setString(3, member.getUserName());
			pstmt.setString(4, member.getPhone());
			pstmt.setString(5, member.getEmail());
			pstmt.setString(6, member.getAddress());
			pstmt.setString(7, member.getInterest());
			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		
		return result;
	}
	
	public int duplicateUserId(Connection conn, String userId) {
		int result = 0;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = prop.getProperty("duplicateUserId");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			rset = pstmt.executeQuery();
			
			while(rset.next()) {
				result = Integer.parseInt(rset.getString("COUNT"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return result;
	}
	
	public int UpdateMember(Connection conn, Member member) {
		int result = 0;
		
		PreparedStatement pstmt = null;
		String sql = prop.getProperty("updateMember");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, member.getUserName());
			pstmt.setString(2, member.getPhone());
			pstmt.setString(3, member.getEmail());
			pstmt.setString(4, member.getAddress());
			pstmt.setString(5, member.getInterest());
			pstmt.setString(6, member.getUserId());
			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(pstmt);
		}
		
		return result;
	}
	
	public Member selectMember(Connection conn, String userId) {
		Member member = null;
	}
}
